// Generated by gencpp from file demo1/addintsRequest.msg
// DO NOT EDIT!


#ifndef DEMO1_MESSAGE_ADDINTSREQUEST_H
#define DEMO1_MESSAGE_ADDINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo1
{
template <class ContainerAllocator>
struct addintsRequest_
{
  typedef addintsRequest_<ContainerAllocator> Type;

  addintsRequest_()
    : n1(0)
    , n2(0)  {
    }
  addintsRequest_(const ContainerAllocator& _alloc)
    : n1(0)
    , n2(0)  {
  (void)_alloc;
    }



   typedef int32_t _n1_type;
  _n1_type n1;

   typedef int32_t _n2_type;
  _n2_type n2;





  typedef boost::shared_ptr< ::demo1::addintsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo1::addintsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct addintsRequest_

typedef ::demo1::addintsRequest_<std::allocator<void> > addintsRequest;

typedef boost::shared_ptr< ::demo1::addintsRequest > addintsRequestPtr;
typedef boost::shared_ptr< ::demo1::addintsRequest const> addintsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo1::addintsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo1::addintsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo1::addintsRequest_<ContainerAllocator1> & lhs, const ::demo1::addintsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.n1 == rhs.n1 &&
    lhs.n2 == rhs.n2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo1::addintsRequest_<ContainerAllocator1> & lhs, const ::demo1::addintsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo1::addintsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo1::addintsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo1::addintsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo1::addintsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo1::addintsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo1::addintsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo1::addintsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24a2eb07eebfdef8a72516605c769411";
  }

  static const char* value(const ::demo1::addintsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24a2eb07eebfdef8ULL;
  static const uint64_t static_value2 = 0xa72516605c769411ULL;
};

template<class ContainerAllocator>
struct DataType< ::demo1::addintsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo1/addintsRequest";
  }

  static const char* value(const ::demo1::addintsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo1::addintsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 n1\n"
"int32 n2\n"
;
  }

  static const char* value(const ::demo1::addintsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo1::addintsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n1);
      stream.next(m.n2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct addintsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo1::addintsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo1::addintsRequest_<ContainerAllocator>& v)
  {
    s << indent << "n1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n1);
    s << indent << "n2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO1_MESSAGE_ADDINTSREQUEST_H
